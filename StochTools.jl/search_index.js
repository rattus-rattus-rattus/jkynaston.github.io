var documenterSearchIndex = {"docs":
[{"location":"index.html#Home","page":"Index","title":"Home","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"This document provides the documentation for the package StochTools.jl","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"This package was written by Joshua C. Kynaston of the University of Bath.","category":"page"},{"location":"index.html#Structures","page":"Index","title":"Structures","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Gillespie_Model","category":"page"},{"location":"index.html#StochTools.Gillespie_Model","page":"Index","title":"StochTools.Gillespie_Model","text":"Gillespie_Model(...)\n\nA mutable struct for storing the parameters and results of a run of the direct Gillespie SSA.\n\nInstantiating this struct requires input of the following mandatory model parameters that  define the basic model behaviour. Specifying this set of parameters is sufficient to run all subsequent methods.\n\nModel Parameters\n\ntf::Float64: Final runtime\nΔt::Float64: Recording time step\nK::Int64: Number of chemical species\nλ::Vector{Union{Int64,Float64}}: Vector of rate parameters\n\ninfo: Initialising\nThis struct is defined via the Parameters.jl package with the @with_kw flag. As such,  initialisation requires that all mandatory parameters be passed as name-value pairs. For example,    model = Gllespie_Model(tf=10, Δt=1e-3, K=5,...)\n\nThe remaining fields that are initialised in this struct are either derived parameters/data structures,  listed below as derived fields, or pre-allocated fields containing matrices for storing additional model data, listed as auxilliary fields.\n\nDerived Fields\n\nt::Float64 = 0.0: Current model time.\nNt::Float64 = floor(tf/Δt) + 1: Number of time steps.\ntp::Int64 = 0: Index of previous time step.\n\nStructural Fields\n\nstate::Matrix{Int64} = Matrix{Int64}(undef, K, 1): Stores the current state. Initialised with dimensions (K,1)\nstoich::Union{Matrix{Int64},Vector{Int64}} = Matrix{Int64}(undef, K, length(λ)): Stoichiometric matrix.\nrec::Matrix{Int64} = Matrix{Int64}(undef, K, Nt): Stores trajectories.\nα:: Vector{Float64} = Vector{Float64}(undef, length(λ)): Vector of calculated propensities.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Methods","page":"Index","title":"Methods","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"sample_reaction(::Vector{Float64})\r\nsample_reaction(::Vector{Float64},::Float64)","category":"page"},{"location":"index.html#StochTools.sample_reaction-Tuple{Vector{Float64}}","page":"Index","title":"StochTools.sample_reaction","text":"sample_reaction(::Vector{Float64})\n\nSamples from a discrete probability distribution.\n\nArguments\n\na::Vector{Any}: Vector of probabilities\n\n\n\n\n\n","category":"method"},{"location":"index.html#StochTools.sample_reaction-Tuple{Vector{Float64}, Float64}","page":"Index","title":"StochTools.sample_reaction","text":"sample_reaction(::Vector{Float64},::Float64)\n\nSamples from an unnormalised discrete distribution.\n\nArguments\n\na::Vector{Float64}: Vector of weights\na₀::Float64: Sum of weights\n\n\n\n\n\n","category":"method"}]
}
